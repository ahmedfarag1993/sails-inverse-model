import { capitalize } from "underscore.string";

/**
 * [toModel simple json to model sails]
 */
export function toModel(model_basic: string) {
	return `
    /**
     * Generated by sails-inverse-model
     * Date: ${(new Date()).toString()}
     **/
    module.exports = { ${model_basic} };`;
};

export function controllerContent(name: string) {
	const name_cap = capitalize(name);
	return [
		"/**",
		"* " + name_cap,
		"*",
		"* @description :: Server-side logic for managing " + name_cap,
		"* @help        :: See http://sailsjs.org/#!/documentation/concepts/Controllers",
		"*/",
		"module.exports = {",
		"		index: function(req, res, next) {",
		"			" + name_cap + ".find().exec(function(err, list) {",
		"	  		if (err) return Error('Error');",
		"		  		return res.view({",
		"						result: list",
		"					});",
		"				});",
		"			},",
		"",
		"		show: function(req, res, next) {",
		"			" + name_cap + ".findOneById(req.param('id'), function Founded(err, value) {",
		"				if (err) {",
		"					return next(err);",
		"				}",
		"				res.view({",
		"					element: value",
		"				});",
		"			});",
		"		},",
		"",
		"		edit: function(req, res, next) {",
		"			" + name_cap + ".findOne(req.param('id'), function Founded(err, value) {",
		"				if (err) {",
		"					return next(err);",
		"				}",
		"				res.view({",
		"					element: value",
		"				});",
		"			});",
		"		},",
		"",
		"		update: function(req, res, next) {",
		"	  	" + name_cap + ".update(req.param('id'), req.body, function Update(err, value) {",
		"				if(err) {",
		"					return next(err);",
		"				}",
		"				return res.redirect('" + name + "/show/' + req.param('id'));",
		"			});",
		"		},",
		"",
		"		delete: function(req, res, next) {",
		"			" + name_cap + ".destroy(req.param('id'), function Update(err, value) {",
		"				if (err) {",
		"					return next(err);",
		"				}",
		"				return res.redirect('/" + name + "');",
		"			});",
		"		},",
		"",
		"};"
	].join("\n");
};

export function SailstoHtmlAtt(typeData: string) {
	switch (typeData) {
		case 'text':
		case 'string':
		case 'mediumtext':
		case 'longtext':
		case 'array':
		case 'json':
			return 'text';
		case 'float':
		case 'integer':
		case 'objectid':
			return 'number';
		case 'boolean':
		case 'binary':
			return 'checkbox';
		default:
			return typeData;
	}
}